"""
I need you to help me write a plan to generate an ontology given a json data table.
You will be feed with the task description to generate the plan and a dataset in JSON format.

I need you to write:

    1. Output Memory: A brief summary of the csv data provided and the reasoning steps followed to generate a plan based
    on the input task description and the provided data in JSON format. You should only store key information.
    The summary should never exceed 20 sentences!

    2. Output Tasks: The generated plan must follow the input instructions and be strict to the output defined format.

    3. Output Instructions:  Instructions for the next task in the plan to be followed (after what you have already planned).
    You should output 3 different instructions, each is a possible interesting continuation of the plan.
    Each output instruction should contain 1 sentence.

Here are the inputs:

    Input Task Description:
    {input_task}

    Input Related data in json format:
    {json_data}

Now start writing, organize your output by strictly following the output format as below:
    Output Memory:
    Rational: <string that explain the reasoning steps followed>;
    Updated Memory: <string that briefly summarizes the csv data and the reasoning steps that guided the generation of
                    the ontology>, around 10 to 20 sentences

    Output Tasks:
        BEGIN
            task_1:
                step_name: Identification of the main entities.
                step_description: The first step is to identify the main entities in the data.
            task_2:
                step_name: Identification of the properties of the entities.
                step_description: Next, the author would identify the properties of each entity. For example, a Product
                                  could have properties such as ProductName, Brand, Image_Url, Category, SubCategory,
                                  and Absolute_Url. An Offer could have properties such as Price, DiscountPrice,
                                  and Quantity.
            task_3:
                step_name: Definition of classes and properties in the ontology.
                step_description: Once the entities and their properties have been identified, the author would define
                                  these classes and properties in the ontology. This would involve the creation of URIs
                                  for each class and property, and the definition of the relationships between them.
            task_4:
                step_name: Definition of constraints and relationships between properties.
                step_description: Next, the author would define any special constraints or relationships between
                                  properties. For example, we could have a price property that is a
                                  sub-property of owl:topDataProperty and is disjoint with discount_price, meaning
                                  that a product cannot have both a price and a discount_price.
            task_5:
                step_name: Inclusion of metadata and annotations.
                step_description: Finally, the author could include metadata and annotations in the ontology, such as
                                  creation date, creator, and comments on properties. This can help others understand
                                  and use the ontology.
            task_6:
                step_name: Base prefix.
                step_description: Use as base prefix -> https://vocab.um.es#.
            task_7:
                step_name: Annotation properties.
                step_description: Define the annotation properties http://purl.org/dc/elements/1.1/creator and
                                  http://purl.org/dc/elements/1.1/date.
        END

    Output Instructions:
        START
            Instruction 1: <content for instruction 1>, do not write more than 1 sentence.
            Instruction 2: <content for instruction 2>, do not write more than 1 sentence.
            Instruction 3: <content for instruction 3>, do not write more than 1 sentence.
        FINISH

Very important:
The updated memory should only store key information.
Write like a powerful task coordinator that provides a procedure for the userâ€™s task
and do not move too fast when writing the output instructions for the next plan.
Do not generate code.
Do not solve the task.
Do not forget to write END at the end of the Output Tasks.
Do not forget to write FINISH at the end of the Output Instructions.
"""

