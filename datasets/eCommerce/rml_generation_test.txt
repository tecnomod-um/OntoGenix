Hello, ChatGPT. As an expert in ontology translation, I need your assistance to generate a mapping in RML format.
I'm providing you with an ontology and the rationalle describing the json data source and the insights describing the semantic structure of the ontology.
I want you to methodically follow the steps provided in the rationale.

**ANALYSIS:**

**Data Description:**
The JSON data table delineates several crucial business attributes. The data table primarily maps "InvoiceNo" identifiers to other essential features, like "StockCode", "Description", "Quantity", "InvoiceDate", "UnitPrice", "CustomerID", and "Country". Each of these identifiers corresponds to specific information, exemplifying an invoice's characteristics. For instance, the "InvoiceNo" represents a unique invoice identifier, while "StockCode" signifies the identifier for the sales article. "Description" elaborates on the nature or type of the sales article, and "Quantity" specifies the number of items for that particular sales article. "InvoiceDate" marks the exact date and time when the invoice was generated. "UnitPrice" conveys the cost of one unit of the sales article. "CustomerID" is indicative of a unique customer identifier associated with a particular invoice. Lastly, "Country" elucidates the nation where the transaction took place.

**Insights:**
The provided instructions lean heavily on converting the JSON data into a structured ontology in the RDF/XML format, focusing on the 'invoice' and 'sales article' classes. Drawing from the rationale, the task entails interconnecting these classes using the object property "hasSalesArticle". Concurrently, each 'invoice' is associated with a 'customer' and a 'country' through object properties, and holds "InvoiceDate" as its data property. The 'sales article', in contrast, embeds the "Quantity" and "Description" data properties, while leveraging an external class, "UnitPriceSpecification", to represent unit pricing intricacies. Converting this structured understanding into RDF/XML syntax will require meticulous care, particularly in ensuring compliance with RDF/XML standards, and establishing appropriate domain-range relationships. A potential challenge could be in maintaining a logical flow in the RDF/XML structure, given the intricate interconnections among classes and properties. It will be pivotal to keep in mind the hierarchical structure while crafting the ontology.

**RDF/XML ONTOLOGY:**

```xml
<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:vocab="https://vocab.um.es#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:schema="http://schema.org/">

    <!-- Definition of Classes -->
    <owl:Class rdf:about="https://vocab.um.es#invoice"/>
    <owl:Class rdf:about="https://vocab.um.es#salesArticle"/>
    <owl:Class rdf:about="http://schema.org/UnitPriceSpecification"/>

    <!-- Object Properties Definition -->
    <owl:ObjectProperty rdf:about="https://vocab.um.es#hasSalesArticle">
        <rdf:domain rdf:resource="https://vocab.um.es#invoice"/>
        <rdf:range rdf:resource="https://vocab.um.es#salesArticle"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="https://vocab.um.es#customer">
        <rdf:domain rdf:resource="https://vocab.um.es#invoice"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#decimal"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="https://vocab.um.es#country">
        <rdf:domain rdf:resource="https://vocab.um.es#invoice"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="https://vocab.um.es#product">
        <rdf:domain rdf:resource="https://vocab.um.es#salesArticle"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="https://vocab.um.es#unitPriceSpecification">
        <rdf:domain rdf:resource="https://vocab.um.es#salesArticle"/>
        <rdf:range rdf:resource="http://schema.org/UnitPriceSpecification"/>
    </owl:ObjectProperty>

    <!-- Data Properties Definition -->
    <owl:DatatypeProperty rdf:about="https://vocab.um.es#InvoiceDate">
        <rdf:domain rdf:resource="https://vocab.um.es#invoice"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>
    </owl:DatatypeProperty>

    <owl:DatatypeProperty rdf:about="https://vocab.um.es#Quantity">
        <rdf:domain rdf:resource="https://vocab.um.es#salesArticle"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
    </owl:DatatypeProperty>

    <owl:DatatypeProperty rdf:about="https://vocab.um.es#Description">
        <rdf:domain rdf:resource="https://vocab.um.es#salesArticle"/>
        <rdf:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    </owl:DatatypeProperty>

</rdf:RDF>
```

Note: The RDF/XML ontology provided above encapsulates the JSON data structure into an RDF/XML format based on the provided instructions. It defines the classes, object properties, and data properties in line with the rationale and tasks presented.

Structure your output in the following format:

<Generate the RML content here:
        Ensure that when creating the URIs of the instances, they are unique, combine columns if necessary and do not use "http://example.org".
        Ensure you add all the necessary prefixes at the beginning of the RML. Ensure you correctly add the references
        to the prefixes in each triple definition block.
        IMPORTANT!! The rml mapping will reference a CSV file not a JSON.
        Follow this format for the definition of classes mappings:

        <#TriplesMapEntity1> a rr:TriplesMap;
            rml:logicalSource [
                rml:source "csv_data.csv";
                rml:referenceFormulation ql:CSV
            ];
            rr:subjectMap [
                rr:template "EntityURI/{Entity1}";
            ];
            rr:predicateObjectMap [
                rr:predicate ex:Property;
                rr:objectMap [
                    rr:parentTriplesMap <#Property>;
                ];
            ].

        <#TriplesMapEntity2> a rr:TriplesMap;
            rml:logicalSource [
                rml:source "csv_data.csv";
                rml:referenceFormulation ql:CSV
            ];
            rr:subjectMap [
                rr:template "EntityURI/{Entity2}";
            ].

        >

Do not explain your answer, just write the rml code. Do no write notes at the end of your writing.
Generate appropriate URIs and combine columns if necessary.
Do not use "http://example.org" or "http://example.com" instead make use of the base prefix.
Create a mapping for each class.
Do not forget to add the prefixes.
Do not shorten your answer.
